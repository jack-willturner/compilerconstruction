### Starting build.
# Target: codegenx86test.ml.depends, tags: { extension:ml, file:codegenx86test.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules codegenx86test.ml > codegenx86test.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o ast.cmo ast.ml # cached
# Target: codegen3.ml.depends, tags: { extension:ml, file:codegen3.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules codegen3.ml > codegen3.ml.depends
# Target: interpreter.ml.depends, tags: { extension:ml, file:interpreter.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules interpreter.ml > interpreter.ml.depends # cached
# Target: interpreter.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:interpreter.cmo, file:interpreter.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o interpreter.cmo interpreter.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/Users/jackturner/.opam/4.01.0/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:mly, file:parser.mly, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: codegen3.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegen3.cmo, file:codegen3.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o codegen3.cmo codegen3.ml
# Target: codegenx86test.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegenx86test.cmo, file:codegenx86test.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o codegenx86test.cmo codegenx86test.ml # cached
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o ast.cmx ast.ml # cached
# Target: interpreter.cmx, tags: { compile, extension:cmx, extension:ml, file:interpreter.cmx, file:interpreter.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o interpreter.cmx interpreter.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o lexer.cmx lexer.ml # cached
# Target: codegen3.cmx, tags: { compile, extension:cmx, extension:ml, file:codegen3.cmx, file:codegen3.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o codegen3.cmx codegen3.ml
# Target: codegenx86test.cmx, tags: { compile, extension:cmx, extension:ml, file:codegenx86test.cmx, file:codegenx86test.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o codegenx86test.cmx codegenx86test.ml # cached
# Target: codegenx86test.native, tags: { dont_link_with, extension:native, file:codegenx86test.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg ast.cmx interpreter.cmx codegen3.cmx parser.cmx lexer.cmx codegenx86test.cmx -o codegenx86test.native
# Compilation successful.
