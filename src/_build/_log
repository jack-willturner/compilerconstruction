### Starting build.
# Target: eval_test.ml.depends, tags: { extension:ml, file:eval_test.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules eval_test.ml > eval_test.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o ast.cmo ast.ml # cached
# Target: evaluator.mli.depends, tags: { extension:mli, file:evaluator.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules evaluator.mli > evaluator.mli.depends # cached
# Target: evaluator.cmi, tags: { byte, compile, extension:mli, file:evaluator.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -o evaluator.cmi evaluator.mli # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/Users/jackturner/.opam/4.01.0/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:mly, file:parser.mly, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: eval_test.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval_test.cmo, file:eval_test.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -o eval_test.cmo eval_test.ml
+ ocamlfind ocamlc -c -o eval_test.cmo eval_test.ml
File "eval_test.ml", line 74, characters 8-12:
Warning 10: this expression should have type unit.
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o ast.cmx ast.ml # cached
# Target: evaluator.ml.depends, tags: { extension:ml, file:evaluator.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules evaluator.ml > evaluator.ml.depends # cached
# Target: evaluator.cmx, tags: { compile, extension:cmx, extension:ml, file:evaluator.cmx, file:evaluator.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o evaluator.cmx evaluator.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o lexer.cmx lexer.ml # cached
# Target: eval_test.cmx, tags: { compile, extension:cmx, extension:ml, file:eval_test.cmx, file:eval_test.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -o eval_test.cmx eval_test.ml
+ ocamlfind ocamlopt -c -o eval_test.cmx eval_test.ml
File "eval_test.ml", line 74, characters 8-12:
Warning 10: this expression should have type unit.
# Target: eval_test.native, tags: { dont_link_with, extension:native, file:eval_test.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg ast.cmx evaluator.cmx parser.cmx lexer.cmx eval_test.cmx -o eval_test.native
# Compilation successful.
