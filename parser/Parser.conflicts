
** Conflict (shift/reduce) in state 77.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF PRINTINT exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 77, looking ahead at LPAREN, reducing production
** exp -> PRINTINT exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
PRINTINT exp . 

** In state 77, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

PRINTINT exp 
         exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** Conflict (shift/reduce) in state 76.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF NOT exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 76, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

NOT exp 
    exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 76, looking ahead at LPAREN, reducing production
** exp -> NOT exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
NOT exp . 

** Conflict (shift/reduce) in state 75.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF NEW STRING EQUAL exp IN exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 75, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

NEW STRING EQUAL exp IN exp 
                        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 75, looking ahead at LPAREN, reducing production
** exp -> NEW STRING EQUAL exp IN exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
NEW STRING EQUAL exp IN exp . 

** Conflict (shift/reduce) in state 72.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF LET STRING EQUAL exp IN exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 72, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

LET STRING EQUAL exp IN exp 
                        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 72, looking ahead at LPAREN, reducing production
** exp -> LET STRING EQUAL exp IN exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
LET STRING EQUAL exp IN exp . 

** Conflict (shift/reduce) in state 57.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp AND exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 57, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp AND exp 
        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 57, looking ahead at LPAREN, reducing production
** exp -> exp AND exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp AND exp . 

** Conflict (shift/reduce) in state 55.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp EQUAL exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 55, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp EQUAL exp 
          exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 55, looking ahead at LPAREN, reducing production
** exp -> exp EQUAL exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp EQUAL exp . 

** Conflict (shift/reduce) in state 53.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp OR exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 53, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp OR exp 
       exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 53, looking ahead at LPAREN, reducing production
** exp -> exp OR exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp OR exp . 

** Conflict (shift/reduce) in state 51.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp SEMIC exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 51, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp SEMIC exp 
          exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 51, looking ahead at LPAREN, reducing production
** exp -> exp SEMIC exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp SEMIC exp . 

** Conflict (shift/reduce) in state 49.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp GEQ exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 49, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp GEQ exp 
        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 49, looking ahead at LPAREN, reducing production
** exp -> exp GEQ exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp GEQ exp . 

** Conflict (shift/reduce) in state 47.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp LEQ exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 47, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp LEQ exp 
        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 47, looking ahead at LPAREN, reducing production
** exp -> exp LEQ exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp LEQ exp . 

** Conflict (shift/reduce) in state 45.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp MINUS exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 45, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp MINUS exp 
          exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 45, looking ahead at LPAREN, reducing production
** exp -> exp MINUS exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp MINUS exp . 

** Conflict (shift/reduce) in state 43.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp COLON EQUAL exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 43, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp COLON EQUAL exp 
                exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 43, looking ahead at LPAREN, reducing production
** exp -> exp COLON EQUAL exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp COLON EQUAL exp . 

** Conflict (shift/reduce) in state 40.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp DIV exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 40, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp DIV exp 
        exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 40, looking ahead at LPAREN, reducing production
** exp -> exp DIV exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp DIV exp . 

** Conflict (shift/reduce) in state 38.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp PLUS exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 38, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp PLUS exp 
         exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 38, looking ahead at LPAREN, reducing production
** exp -> exp PLUS exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp PLUS exp . 

** Conflict (shift/reduce) in state 36.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp EXCLAMATION EQUAL exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 36, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp EXCLAMATION EQUAL exp 
                      exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 36, looking ahead at LPAREN, reducing production
** exp -> exp EXCLAMATION EQUAL exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp EXCLAMATION EQUAL exp . 

** Conflict (shift/reduce) in state 33.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp TIMES exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 33, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

exp TIMES exp 
          exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 33, looking ahead at LPAREN, reducing production
** exp -> exp TIMES exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
exp TIMES exp . 

** Conflict (shift/reduce) in state 26.
** Token involved: LPAREN
** This state is reached from top after reading:

STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF EXCLAMATION exp 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
loption(separated_nonempty_list(FULLSTOP,fundef)) EOF 
separated_nonempty_list(FULLSTOP,fundef) 
fundef 
STRING LPAREN loption(separated_nonempty_list(COMMA,STRING)) RPAREN DEF exp 
                                                                        (?)

** In state 26, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

EXCLAMATION exp 
            exp . LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN 

** In state 26, looking ahead at LPAREN, reducing production
** exp -> EXCLAMATION exp 
** is permitted because of the following sub-derivation:

exp LPAREN loption(separated_nonempty_list(COMMA,exp)) RPAREN // lookahead token appears
EXCLAMATION exp . 
